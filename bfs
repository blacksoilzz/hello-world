class Graph:
    def __init__(self):
        self.adj = {}

    def add_edge(self, u, v):
        if not self.adj[u]:
            self.adj[u] = v
        self.adj[u].append(v)


class BFSResult:
    def __init__(self):
        self.level = {}
        self.parent = {}


def bfs(g, s):
    ret = BFSResult()
    ret.parent = {s: None, }
    ret.level = {s: 0, }
    i = 1
    frontier = [s]
    while frontier:
        next_level = []
        for u in frontier:
            for v in g.adj[u]:
                if v not in ret.level:
                    ret.level[v] = i
                    ret.parent[v] =u
                    next_level.append(v)
        frontier = next_level
        i += 1
    return ret


def shortpath(bfs_result, v):
    source = [ source for source, level in bfs_result.level.items() if level == 0 ]
    parent_list = []
    if v != source[0]:
        v_parent = bfs_result.parent[v]
        parent_list.append(v_parent)
        while v_parent != source[0] and v_parent:
            v_parent = bfs_result.parent[v_parent]
            parent_list.append(v_parent)
    return parent_list

g = Graph()
g.adj = {
    's': ['a', 'x'],
    'a': ['z', 's'],
    'd': ['f', 'c', 'x'],
    'c': ['x', 'd', 'f', 'v'],
    'v': ['f', 'c'],
    'f': ['c', 'd', 'v'],
    'x': ['s', 'd', 'c'],
    'z': []
}

bfs_result = bfs(g, 's')
print(bfs_result.level)
print(shortpath(bfs_result, 'f'))
